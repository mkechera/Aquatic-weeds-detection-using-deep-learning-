import zipfile
import os
import shutil
with zipfile.ZipFile("Data.zip","r") as f:
  f.extractall('.')

def adjustData(img,flag_multi_class,num_class):
    if(flag_multi_class):
        img = img / 255
    elif(np.max(img) > 1):
        img = img / 255
    return (img)
def geneTrainNpy(image_path,flag_multi_class = False,num_class = 2,image_prefix = "image",image_as_gray = True,mask_as_gray = True):
    image_name_arr = glob.glob(os.path.join(image_path,"%s*.png"%image_prefix))
    image_arr = []
    for index,item in enumerate(image_name_arr):
        img = io.imread(item,as_gray = image_as_gray)
        img = np.reshape(img,img.shape + (1,)) if image_as_gray else img
      
        image_arr.append(img)
    image_arr = np.array(image_arr)
    return image_arr
def trainGenerator(batch_size,train_path,image_folder,aug_dict,image_color_mode = "grayscale",image_save_prefix  = "image",
                    flag_multi_class = False,num_class = 2,save_to_dir = None,target_size = (256,256),seed = 1):
    image_datagen = ImageDataGenerator(**aug_dict)
    image_generator = image_datagen.flow_from_directory(
        train_path,
        classes = [image_folder],
        class_mode = None,
        color_mode = image_color_mode,
        target_size = target_size,
        batch_size = batch_size,
        save_to_dir = save_to_dir,
        save_prefix  = image_save_prefix,
        seed = seed)
    train_generator = zip(image_generator)
    for (img) in train_generator:
        
        yield (img)
data_gen_args = dict(rotation_range=0.2,
                    width_shift_range=0.05,
                    height_shift_range=0.05,
                    shear_range=0.05,
                    zoom_range=0.05,
                    horizontal_flip=True,
                    fill_mode='nearest')
myGenerator = trainGenerator(6,'Data','image',data_gen_args,save_to_dir = "Data/aug")
from keras.preprocessing.image import ImageDataGenerator
import numpy as np 
import os
import glob
import skimage.io as io
import skimage.transform as trans

num_batch = 3
for i,batch in enumerate(myGenerator):
    if(i >= num_batch):
        break

import matplotlib.pyplot as plt
import random
image_arr = geneTrainNpy("Data/aug/")